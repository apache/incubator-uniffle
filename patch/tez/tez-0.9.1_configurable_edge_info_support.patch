#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#



diff --git a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/common/RssShuffleFactory.java b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/common/RssShuffleFactory.java
new file mode 100644
index 0000000000..99ba56dc84
--- /dev/null
+++ b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/common/RssShuffleFactory.java
@@ -0,0 +1,237 @@
+package org.apache.tez.runtime.library.common;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.tez.common.TezUtils;
+import org.apache.tez.dag.api.TezConfiguration;
+import org.apache.tez.dag.api.UserPayload;
+import org.apache.tez.runtime.library.api.TezRuntimeConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+public class RssShuffleFactory {
+    private static final Logger LOG = LoggerFactory.getLogger(RssShuffleFactory.class);
+    private static final String TEZ_RSS_RUNTIME_SHUFFLE_RSS_ENABLED = "tez.runtime.rss.enabled";
+    private static final String TEZ_RSS_RUNTIME_IO_SORT_MB = "tez.rss.runtime.io.sort.mb";
+    private static final String TEZ_RSS_CLIENT_SORT_MEMORY_USE_THREAD = "tez.rss.client.sort.memory.use.threshold";
+    private static final String TEZ_RSS_CLIENT_MAX_BUFFER_SIZE = "tez.rss.client.max.buffer.size";
+    private static final String TEZ_RSS_WRITER_BUFFER_SIZE = "tez.rss.writer.buffer.size";
+    private static final String TEZ_RSS_CLIENT_MEMORY_THREAD = "tez.rss.client.memory.threshold";
+    private static final String TEZ_RSS_CLIENT_SEND_THREAD = "tez.rss.client.send.threshold";
+    private static final String TEZ_RSS_CLIENT_BATCH_TRIGGER_NUM = "tez.rss.client.batch.trigger.num";
+    private static final String TEZ_RSS_STORAGE_TYPE = "tez.rss.storage.type";
+    private static final String TEZ_RSS_CLIENT_SEND_CHECK_INTERVAL_MS = "tez.rss.client.send.check.interval.ms";
+    private static final String TEZ_RSS_CLIENT_SEND_CHECK_TIMEOUT_MS = "tez.rss.client.send.check.timeout.ms";
+    private static final String TEZ_RSS_CLIENT_BITMAP_NUM = "tez.rss.client.bitmap.num";
+    private static final String HIVE_TEZ_LOG_LEVEL = "hive.tez.log.level";
+
+    private static final boolean TEZ_RSS_RUNTIME_SHUFFLE_RSS_ENABLED_DEFAULT = false;
+
+    public static boolean isRssEnabled(UserPayload userPayload) {
+        try{
+            Configuration conf = TezUtils.createConfFromUserPayload(userPayload);
+            LOG.info("RssShuffleFactory.isRssEnabled ? {}", isRssEnabled(conf));
+            return isRssEnabled(conf);
+        }catch (IOException e){
+            LOG.warn("Parse failed for user payload when check rss enabled or not!", e);
+        }
+        return false;
+    }
+
+    public static boolean isRssEnabled(Configuration conf) {
+        return conf.getBoolean(TEZ_RSS_RUNTIME_SHUFFLE_RSS_ENABLED, TEZ_RSS_RUNTIME_SHUFFLE_RSS_ENABLED_DEFAULT);
+    }
+
+    public static class RssOrderedPartitionedKVOutput{
+        public static final String outputClassName = "org.apache.tez.runtime.library.output.RssOrderedPartitionedKVOutput";
+
+        private static final Set<String> confKeys = new HashSet<String>();
+
+        static {
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_IFILE_READAHEAD);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_IFILE_READAHEAD_BYTES);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_IO_FILE_BUFFER_SIZE);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_INDEX_CACHE_MEMORY_LIMIT_BYTES);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_UNORDERED_OUTPUT_BUFFER_SIZE_MB);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_UNORDERED_OUTPUT_MAX_PER_BUFFER_SIZE_BYTES);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_PARTITIONER_CLASS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_KEY_CLASS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_VALUE_CLASS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_COMPRESS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_COMPRESS_CODEC);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_EMPTY_PARTITION_INFO_VIA_EVENTS_ENABLED);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_CONVERT_USER_PAYLOAD_TO_HISTORY_TEXT);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_PIPELINED_SHUFFLE_ENABLED);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_ENABLE_FINAL_MERGE_IN_OUTPUT);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_MAX);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_GROUP_NAME_MAX_LENGTH);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_COUNTER_NAME_MAX_LENGTH);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_MAX_GROUPS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_CLEANUP_FILES_ON_INTERRUPT);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_REPORT_PARTITION_STATS);
+            confKeys.add(TezConfiguration.TEZ_AM_SHUFFLE_AUXILIARY_SERVICE_ID);
+            confKeys.add(
+                    TezRuntimeConfiguration.TEZ_RUNTIME_UNORDERED_PARTITIONED_KVWRITER_BUFFER_MERGE_PERCENT);
+            confKeys.add(TEZ_RSS_RUNTIME_SHUFFLE_RSS_ENABLED);
+            confKeys.add(TEZ_RSS_RUNTIME_IO_SORT_MB);
+            confKeys.add(TEZ_RSS_CLIENT_SORT_MEMORY_USE_THREAD);
+            confKeys.add(TEZ_RSS_CLIENT_MAX_BUFFER_SIZE);
+            confKeys.add(TEZ_RSS_WRITER_BUFFER_SIZE);
+            confKeys.add(TEZ_RSS_CLIENT_MEMORY_THREAD);
+            confKeys.add(TEZ_RSS_CLIENT_SEND_THREAD);
+            confKeys.add(TEZ_RSS_CLIENT_BATCH_TRIGGER_NUM);
+            confKeys.add(TEZ_RSS_STORAGE_TYPE);
+            confKeys.add(TEZ_RSS_CLIENT_SEND_CHECK_INTERVAL_MS);
+            confKeys.add(TEZ_RSS_CLIENT_SEND_CHECK_TIMEOUT_MS);
+            confKeys.add(TEZ_RSS_CLIENT_BITMAP_NUM);
+            confKeys.add(HIVE_TEZ_LOG_LEVEL);
+        }
+
+        public static Set<String> getConfigurationKeySet() {
+            return Collections.unmodifiableSet(confKeys);
+        }
+    }
+
+
+    public static class RssUnOrderedPartitionedKVOutput{
+        public static final String outputClassName = "org.apache.tez.runtime.library.output.RssUnorderedPartitionedKVOutput";
+        private static final Set<String> confKeys = new HashSet<String>();
+
+        static {
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_IFILE_READAHEAD);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_IFILE_READAHEAD_BYTES);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_IO_FILE_BUFFER_SIZE);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_INDEX_CACHE_MEMORY_LIMIT_BYTES);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_UNORDERED_OUTPUT_BUFFER_SIZE_MB);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_UNORDERED_OUTPUT_MAX_PER_BUFFER_SIZE_BYTES);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_PARTITIONER_CLASS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_KEY_CLASS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_VALUE_CLASS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_COMPRESS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_COMPRESS_CODEC);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_EMPTY_PARTITION_INFO_VIA_EVENTS_ENABLED);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_CONVERT_USER_PAYLOAD_TO_HISTORY_TEXT);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_PIPELINED_SHUFFLE_ENABLED);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_ENABLE_FINAL_MERGE_IN_OUTPUT);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_MAX);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_GROUP_NAME_MAX_LENGTH);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_COUNTER_NAME_MAX_LENGTH);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_MAX_GROUPS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_CLEANUP_FILES_ON_INTERRUPT);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_REPORT_PARTITION_STATS);
+            confKeys.add(TezConfiguration.TEZ_AM_SHUFFLE_AUXILIARY_SERVICE_ID);
+            confKeys.add(
+                    TezRuntimeConfiguration.TEZ_RUNTIME_UNORDERED_PARTITIONED_KVWRITER_BUFFER_MERGE_PERCENT);
+
+            confKeys.add(TEZ_RSS_RUNTIME_SHUFFLE_RSS_ENABLED);
+            confKeys.add(TEZ_RSS_RUNTIME_IO_SORT_MB);
+            confKeys.add(TEZ_RSS_CLIENT_SORT_MEMORY_USE_THREAD);
+            confKeys.add(TEZ_RSS_CLIENT_MAX_BUFFER_SIZE);
+            confKeys.add(TEZ_RSS_WRITER_BUFFER_SIZE);
+            confKeys.add(TEZ_RSS_CLIENT_MEMORY_THREAD);
+            confKeys.add(TEZ_RSS_CLIENT_SEND_THREAD);
+            confKeys.add(TEZ_RSS_CLIENT_BATCH_TRIGGER_NUM);
+            confKeys.add(TEZ_RSS_STORAGE_TYPE);
+            confKeys.add(TEZ_RSS_CLIENT_SEND_CHECK_INTERVAL_MS);
+            confKeys.add(TEZ_RSS_CLIENT_SEND_CHECK_TIMEOUT_MS);
+            confKeys.add(TEZ_RSS_CLIENT_BITMAP_NUM);
+            confKeys.add(HIVE_TEZ_LOG_LEVEL);
+        }
+
+        public static Set<String> getConfigurationKeySet() {
+            return Collections.unmodifiableSet(confKeys);
+        }
+    }
+
+    public static class RssUnorderedKVOutput{
+        public static final String outputClassName = "org.apache.tez.runtime.library.output.RssUnorderedKVOutput";
+
+        private static final Set<String> confKeys = new HashSet<String>();
+
+        static {
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_IFILE_READAHEAD);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_IFILE_READAHEAD_BYTES);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_IO_FILE_BUFFER_SIZE);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_INDEX_CACHE_MEMORY_LIMIT_BYTES);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_UNORDERED_OUTPUT_BUFFER_SIZE_MB);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_UNORDERED_OUTPUT_MAX_PER_BUFFER_SIZE_BYTES);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_PARTITIONER_CLASS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_KEY_CLASS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_VALUE_CLASS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_COMPRESS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_COMPRESS_CODEC);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_EMPTY_PARTITION_INFO_VIA_EVENTS_ENABLED);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_CONVERT_USER_PAYLOAD_TO_HISTORY_TEXT);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_PIPELINED_SHUFFLE_ENABLED);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_ENABLE_FINAL_MERGE_IN_OUTPUT);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_MAX);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_GROUP_NAME_MAX_LENGTH);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_COUNTER_NAME_MAX_LENGTH);
+            confKeys.add(TezConfiguration.TEZ_COUNTERS_MAX_GROUPS);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_CLEANUP_FILES_ON_INTERRUPT);
+            confKeys.add(TezRuntimeConfiguration.TEZ_RUNTIME_REPORT_PARTITION_STATS);
+            confKeys.add(TezConfiguration.TEZ_AM_SHUFFLE_AUXILIARY_SERVICE_ID);
+            confKeys.add(
+                    TezRuntimeConfiguration.TEZ_RUNTIME_UNORDERED_PARTITIONED_KVWRITER_BUFFER_MERGE_PERCENT);
+
+            confKeys.add(TEZ_RSS_RUNTIME_SHUFFLE_RSS_ENABLED);
+            confKeys.add(TEZ_RSS_RUNTIME_IO_SORT_MB);
+            confKeys.add(TEZ_RSS_CLIENT_SORT_MEMORY_USE_THREAD);
+            confKeys.add(TEZ_RSS_CLIENT_MAX_BUFFER_SIZE);
+            confKeys.add(TEZ_RSS_WRITER_BUFFER_SIZE);
+            confKeys.add(TEZ_RSS_CLIENT_MEMORY_THREAD);
+            confKeys.add(TEZ_RSS_CLIENT_SEND_THREAD);
+            confKeys.add(TEZ_RSS_CLIENT_BATCH_TRIGGER_NUM);
+            confKeys.add(TEZ_RSS_STORAGE_TYPE);
+            confKeys.add(TEZ_RSS_CLIENT_SEND_CHECK_INTERVAL_MS);
+            confKeys.add(TEZ_RSS_CLIENT_SEND_CHECK_TIMEOUT_MS);
+            confKeys.add(TEZ_RSS_CLIENT_BITMAP_NUM);
+            confKeys.add(HIVE_TEZ_LOG_LEVEL);
+        }
+
+        public static Set<String> getConfigurationKeySet() {
+            return Collections.unmodifiableSet(confKeys);
+        }
+    }
+
+    public static class RssKVInput {
+        private static final Set<String> confKeys = new HashSet<String>();
+
+        static {
+            confKeys.add(TEZ_RSS_RUNTIME_SHUFFLE_RSS_ENABLED);
+        }
+
+        // TODO Maybe add helper methods to extract keys
+        // TODO Maybe add constants or an Enum to access the keys
+        @InterfaceAudience.Private
+        public static Set<String> getConfigurationKeySet() {
+            return Collections.unmodifiableSet(confKeys);
+        }
+    }
+
+
+    public static class RssUnOrderedPartitionedKVInput extends RssKVInput {
+        static final String inputClassName = "org.apache.tez.runtime.library.input.RssUnorderedKVInput";
+
+        public static String getInputClassName(){
+            LOG.info("Use RssUnOrderedPartitionedKVInput, inputClassName:{}", inputClassName);
+            return inputClassName;
+        }
+    }
+
+
+    public static class RssOrderedPartitionedKVInput extends RssKVInput {
+        static final String inputClassName = "org.apache.tez.runtime.library.input.RssOrderedGroupedKVInput";
+
+        public static String getInputClassName(){
+            LOG.info("Use RssOrderedPartitionedKVInput, inputClassName:{}", inputClassName);
+            return inputClassName;
+        }
+    }
+}
\ No newline at end of file
diff --git a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedGroupedKVInputConfig.java b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedGroupedKVInputConfig.java
index 11a8d6fd9e..88b7a28474 100644
--- a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedGroupedKVInputConfig.java
+++ b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedGroupedKVInputConfig.java
@@ -37,6 +37,7 @@
 import org.apache.tez.dag.api.UserPayload;
 import org.apache.tez.runtime.library.api.TezRuntimeConfiguration;
 import org.apache.tez.runtime.library.common.ConfigUtils;
+import org.apache.tez.runtime.library.common.RssShuffleFactory;
 import org.apache.tez.runtime.library.input.OrderedGroupedKVInput;
 import org.apache.tez.runtime.library.input.OrderedGroupedInputLegacy;

@@ -238,6 +239,11 @@ public E done() {

   private OrderedGroupedKVInputConfig(Configuration conf, boolean useLegacyInput) {
     this.conf = conf;
+    if (RssShuffleFactory.isRssEnabled(conf)){
+      inputClassName = RssShuffleFactory.RssOrderedPartitionedKVInput.getInputClassName();
+      return;
+    }
+
     if (useLegacyInput) {
       inputClassName = OrderedGroupedInputLegacy.class.getName();
     } else {
@@ -448,9 +454,18 @@ public Builder setAdditionalConfiguration(Map<String, String> confMap) {
     public Builder setFromConfiguration(Configuration conf) {
       // Maybe ensure this is the first call ? Otherwise this can end up overriding other parameters
       Preconditions.checkArgument(conf != null, "Configuration cannot be null");
-      Map<String, String> map = ConfigUtils.extractConfigurationMap(conf,
-          Lists.newArrayList(OrderedGroupedKVInput.getConfigurationKeySet(),
-              TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      Map<String, String> map;
+      if(RssShuffleFactory.isRssEnabled(conf)){
+        map = ConfigUtils.extractConfigurationMap(conf,
+                Lists.newArrayList(OrderedGroupedKVInput.getConfigurationKeySet(),
+                        RssShuffleFactory.RssOrderedPartitionedKVInput.getConfigurationKeySet(),
+                        TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      } else {
+        map = ConfigUtils.extractConfigurationMap(conf,
+                Lists.newArrayList(OrderedGroupedKVInput.getConfigurationKeySet(),
+                        TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      }
+
       ConfigUtils.addConfigMapToConfiguration(this.conf, map);
       return this;
     }
diff --git a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedPartitionedKVEdgeConfig.java b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedPartitionedKVEdgeConfig.java
index 350420390a..e9f1e6db18 100644
--- a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedPartitionedKVEdgeConfig.java
+++ b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedPartitionedKVEdgeConfig.java
@@ -32,6 +32,7 @@
 import org.apache.tez.dag.api.InputDescriptor;
 import org.apache.tez.dag.api.OutputDescriptor;
 import org.apache.tez.dag.api.UserPayload;
+import org.apache.tez.runtime.library.common.RssShuffleFactory;
 import org.apache.tez.runtime.library.output.OrderedPartitionedKVOutput;

 /**
@@ -95,6 +96,9 @@ public UserPayload getOutputPayload() {

   @Override
   public String getOutputClassName() {
+    if(RssShuffleFactory.isRssEnabled(getOutputPayload())){
+      return RssShuffleFactory.RssOrderedPartitionedKVOutput.outputClassName;
+    }
     return OrderedPartitionedKVOutput.class.getName();
   }

diff --git a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedPartitionedKVOutputConfig.java b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedPartitionedKVOutputConfig.java
index 0f37c66616..9b5a334a9b 100644
--- a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedPartitionedKVOutputConfig.java
+++ b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/OrderedPartitionedKVOutputConfig.java
@@ -37,6 +37,7 @@
 import org.apache.tez.dag.api.UserPayload;
 import org.apache.tez.runtime.library.api.TezRuntimeConfiguration;
 import org.apache.tez.runtime.library.common.ConfigUtils;
+import org.apache.tez.runtime.library.common.RssShuffleFactory;
 import org.apache.tez.runtime.library.output.OrderedPartitionedKVOutput;


@@ -374,9 +375,17 @@ public Builder setAdditionalConfiguration(Map<String, String> confMap) {
     public Builder setFromConfiguration(Configuration conf) {
       // Maybe ensure this is the first call ? Otherwise this can end up overriding other parameters
       Preconditions.checkArgument(conf != null, "Configuration cannot be null");
-      Map<String, String> map = ConfigUtils.extractConfigurationMap(conf,
-          Lists.newArrayList(OrderedPartitionedKVOutput.getConfigurationKeySet(),
-              TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      Map<String, String> map;
+      if(RssShuffleFactory.isRssEnabled(conf)){
+        map = ConfigUtils.extractConfigurationMap(conf,
+                Lists.newArrayList(RssShuffleFactory.RssOrderedPartitionedKVOutput.getConfigurationKeySet(),
+                        TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      } else {
+        map = ConfigUtils.extractConfigurationMap(conf,
+                Lists.newArrayList(OrderedPartitionedKVOutput.getConfigurationKeySet(),
+                        TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      }
+
       ConfigUtils.addConfigMapToConfiguration(this.conf, map);
       return this;
     }
diff --git a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVEdgeConfig.java b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVEdgeConfig.java
index 25a48232b0..b050f71416 100644
--- a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVEdgeConfig.java
+++ b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVEdgeConfig.java
@@ -34,6 +34,7 @@
 import org.apache.tez.dag.api.InputDescriptor;
 import org.apache.tez.dag.api.OutputDescriptor;
 import org.apache.tez.dag.api.UserPayload;
+import org.apache.tez.runtime.library.common.RssShuffleFactory;
 import org.apache.tez.runtime.library.input.UnorderedKVInput;
 import org.apache.tez.runtime.library.output.UnorderedKVOutput;

@@ -74,6 +75,9 @@ public UserPayload getOutputPayload() {

   @Override
   public String getOutputClassName() {
+    if(RssShuffleFactory.isRssEnabled(getInputPayload())){
+      return RssShuffleFactory.RssUnorderedKVOutput.outputClassName;
+    }
     return UnorderedKVOutput.class.getName();
   }

@@ -94,6 +98,9 @@ public String getInputHistoryText() {

   @Override
   public String getInputClassName() {
+    if(RssShuffleFactory.isRssEnabled(getInputPayload())){
+      return RssShuffleFactory.RssUnOrderedPartitionedKVInput.getInputClassName();
+    }
     return UnorderedKVInput.class.getName();
   }

diff --git a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVInputConfig.java b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVInputConfig.java
index af7dbf6c22..05f7a784a4 100644
--- a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVInputConfig.java
+++ b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVInputConfig.java
@@ -37,6 +37,7 @@
 import org.apache.tez.dag.api.UserPayload;
 import org.apache.tez.runtime.library.api.TezRuntimeConfiguration;
 import org.apache.tez.runtime.library.common.ConfigUtils;
+import org.apache.tez.runtime.library.common.RssShuffleFactory;
 import org.apache.tez.runtime.library.input.UnorderedKVInput;

 @InterfaceAudience.Public
@@ -295,11 +296,20 @@ public Builder setAdditionalConfiguration(Map<String, String> confMap) {
     public Builder setFromConfiguration(Configuration conf) {
       // Maybe ensure this is the first call ? Otherwise this can end up overriding other parameters
       Preconditions.checkArgument(conf != null, "Configuration cannot be null");
-      Map<String, String> map = ConfigUtils.extractConfigurationMap(conf,
-          Lists.newArrayList(UnorderedKVInput.getConfigurationKeySet(),
-              TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
-      ConfigUtils.addConfigMapToConfiguration(this.conf, map);
-      return this;
+      if(RssShuffleFactory.isRssEnabled(conf)){
+        Map<String, String> map = ConfigUtils.extractConfigurationMap(conf,
+                Lists.newArrayList(UnorderedKVInput.getConfigurationKeySet(),
+                        RssShuffleFactory.RssUnOrderedPartitionedKVOutput.getConfigurationKeySet(),
+                        TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+        ConfigUtils.addConfigMapToConfiguration(this.conf, map);
+        return this;
+      } else {
+        Map<String, String> map = ConfigUtils.extractConfigurationMap(conf,
+                Lists.newArrayList(UnorderedKVInput.getConfigurationKeySet(),
+                        TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+        ConfigUtils.addConfigMapToConfiguration(this.conf, map);
+        return this;
+      }
     }

     @SuppressWarnings("unchecked")
diff --git a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVOutputConfig.java b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVOutputConfig.java
index a9a15a0c15..40e6246ea1 100644
--- a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVOutputConfig.java
+++ b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedKVOutputConfig.java
@@ -37,6 +37,7 @@
 import org.apache.tez.dag.api.UserPayload;
 import org.apache.tez.runtime.library.api.TezRuntimeConfiguration;
 import org.apache.tez.runtime.library.common.ConfigUtils;
+import org.apache.tez.runtime.library.common.RssShuffleFactory;
 import org.apache.tez.runtime.library.output.UnorderedKVOutput;

 @InterfaceAudience.Public
@@ -222,9 +223,17 @@ public Builder setAdditionalConfiguration(Map<String, String> confMap) {
     public Builder setFromConfiguration(Configuration conf) {
       // Maybe ensure this is the first call ? Otherwise this can end up overriding other parameters
       Preconditions.checkArgument(conf != null, "Configuration cannot be null");
-      Map<String, String> map = ConfigUtils.extractConfigurationMap(conf,
-          Lists.newArrayList(UnorderedKVOutput.getConfigurationKeySet(),
-              TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      Map<String, String> map;
+      if (RssShuffleFactory.isRssEnabled(conf)) {
+        map = ConfigUtils.extractConfigurationMap(conf,
+                Lists.newArrayList(RssShuffleFactory.RssUnorderedKVOutput.getConfigurationKeySet(),
+                        TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      } else {
+        map = ConfigUtils.extractConfigurationMap(conf,
+                Lists.newArrayList(UnorderedKVOutput.getConfigurationKeySet(),
+                        TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      }
+
       ConfigUtils.addConfigMapToConfiguration(this.conf, map);
       return this;
     }
diff --git a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedPartitionedKVEdgeConfig.java b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedPartitionedKVEdgeConfig.java
index 52da491517..d7cb581023 100644
--- a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedPartitionedKVEdgeConfig.java
+++ b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedPartitionedKVEdgeConfig.java
@@ -34,6 +34,7 @@
 import org.apache.tez.dag.api.InputDescriptor;
 import org.apache.tez.dag.api.OutputDescriptor;
 import org.apache.tez.dag.api.UserPayload;
+import org.apache.tez.runtime.library.common.RssShuffleFactory;
 import org.apache.tez.runtime.library.input.UnorderedKVInput;
 import org.apache.tez.runtime.library.output.UnorderedPartitionedKVOutput;

@@ -99,6 +100,9 @@ public UserPayload getOutputPayload() {

   @Override
   public String getOutputClassName() {
+    if(RssShuffleFactory.isRssEnabled(getOutputPayload())){
+      return RssShuffleFactory.RssUnOrderedPartitionedKVOutput.outputClassName;
+    }
     return UnorderedPartitionedKVOutput.class.getName();
   }

@@ -119,6 +123,9 @@ public String getInputHistoryText() {

   @Override
   public String getInputClassName() {
+    if(RssShuffleFactory.isRssEnabled(getInputPayload())){
+      return RssShuffleFactory.RssUnOrderedPartitionedKVInput.getInputClassName();
+    }
     return UnorderedKVInput.class.getName();
   }

diff --git a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedPartitionedKVOutputConfig.java b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedPartitionedKVOutputConfig.java
index 3555e1c3c0..96c999eba2 100644
--- a/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedPartitionedKVOutputConfig.java
+++ b/tez-runtime-library/src/main/java/org/apache/tez/runtime/library/conf/UnorderedPartitionedKVOutputConfig.java
@@ -37,6 +37,7 @@
 import org.apache.tez.dag.api.UserPayload;
 import org.apache.tez.runtime.library.api.TezRuntimeConfiguration;
 import org.apache.tez.runtime.library.common.ConfigUtils;
+import org.apache.tez.runtime.library.common.RssShuffleFactory;
 import org.apache.tez.runtime.library.output.UnorderedPartitionedKVOutput;

 @InterfaceAudience.Public
@@ -266,9 +267,17 @@ public Builder setAdditionalConfiguration(Map<String, String> confMap) {
     public Builder setFromConfiguration(Configuration conf) {
       // Maybe ensure this is the first call ? Otherwise this can end up overriding other parameters
       Preconditions.checkArgument(conf != null, "Configuration cannot be null");
-      Map<String, String> map = ConfigUtils.extractConfigurationMap(conf,
-          Lists.newArrayList(UnorderedPartitionedKVOutput.getConfigurationKeySet(),
-              TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      Map<String, String> map;
+      if(RssShuffleFactory.isRssEnabled(conf)){
+        map = ConfigUtils.extractConfigurationMap(conf,
+                Lists.newArrayList(RssShuffleFactory.RssUnOrderedPartitionedKVOutput.getConfigurationKeySet(),
+                        TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      }else {
+        map = ConfigUtils.extractConfigurationMap(conf,
+                Lists.newArrayList(UnorderedPartitionedKVOutput.getConfigurationKeySet(),
+                        TezRuntimeConfiguration.getRuntimeAdditionalConfigKeySet()), TezRuntimeConfiguration.getAllowedPrefixes());
+      }
+
       ConfigUtils.addConfigMapToConfiguration(this.conf, map);
       return this;
     }
